class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        ROWS, COLS = len(matrix), len(matrix[0])
        dp = {}

        def dfs(r, c , prevVal):
            if(r < 0 or r == ROWS or
               c < 0 or c == COLS or 
               matrix[r][c] <= prevVal):
               return 0 
            if (r, c) in dp:
                return dp[(r, c)]
            
            res = 1
            res = max(res, 1 + dfs(r + 1, c, matrix[r][c]))
            res = max(res, 1 + dfs(r - 1, c, matrix[r][c]))
            res = max(res, 1 + dfs(r, c + 1, matrix[r][c]))
            res = max(res, 1 + dfs(r, c - 1, matrix[r][c]))
            dp[(r, c)] = res
            return res

        for r in range(ROWS):
            for c in range(COLS):
                dfs(r, c, -1)
        return max(dp.values())
    
# Key Concepts:
# DFS with Memoization: The dfs function explores all possible increasing paths starting from each cell. To avoid recalculating the same paths multiple times, the results are stored in the dp dictionary.
# Four Directions: The algorithm explores all four directions (up, down, left, right) from every cell to check for increasing values, which allows it to traverse all potential paths.
# Recursive Backtracking: The recursion ensures that once all possible paths from a given cell have been explored, the result is cached, and the function moves to the next starting point.
# Time Complexity:
# The time complexity is O(m * n), where m is the number of rows and n is the number of columns. This is because each cell is visited once and the result is stored in the dp dictionary to avoid re-computation.
# Space Complexity:
# The space complexity is O(m * n) due to the dp dictionary, which stores the longest path for each cell in the matrix.