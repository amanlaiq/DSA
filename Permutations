class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []

        if len(nums) == 1:
            return [nums[:]]

        for i in range (len(nums)):
            n = nums.pop(0)
            perms = self.permute(nums)

            for perm in perms:
                perm.append(n)
            res.extend(perms)
            nums.append(n)
        return res     

# Example Walkthrough
# Letâ€™s walk through the function with an example:

# Input: nums = [1, 2, 3]
# The function starts with nums = [1, 2, 3].
# n = 1, so the function calls itself recursively with nums = [2, 3].
# For nums = [2, 3], the function pops 2, and the recursive call generates permutations for nums = [3], which is [[3]]. Then, 2 is appended to each permutation, resulting in [[3, 2]]. The original list is restored to [2, 3], and res = [[3, 2], [2, 3]].
# Back in the original call, 1 is appended to each permutation from step 3, giving [[3, 2, 1], [2, 3, 1]].
# Next, n = 2, and a similar process occurs for nums = [1, 3], leading to [[1, 3, 2], [3, 1, 2]].
# Finally, n = 3, producing permutations [[1, 2, 3], [2, 1, 3]].
# The final result is the collection of all these permutations: [[1, 2, 3], [2, 1, 3], [3, 1, 2], [1, 3, 2], [2, 3, 1], [3, 2, 1]]. 