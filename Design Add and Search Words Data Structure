class TrieNode:
    def __init__(self):
        self.children = {}
        self.word = False

class TrieNode:
    def __init__(self):
        self.children = {}
        self.word = False

class WordDictionary:

    def __init__(self):
        self.root = TrieNode()
        
    def addWord(self, word: str) -> None:
        cur = self.root

        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.word = True

    def search(self, word: str) -> bool:
        def dfs(j, root):
            cur = root 

            for i in range(j, len(word)):
                c = word[i]
                
                if c == ".":
                    for child in cur.children.values():
                        if dfs(i + 1, child):
                            return True
                    return False
                else:
                    if c not in cur.children:
                        return False
                    cur = cur.children[c]
            return cur.word

        return dfs(0, self.root)

        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)

# Overview
# Data Structure: Trie (Prefix Tree)
# Purpose: Efficiently store and search words. Supports wildcard '.' which can represent any letter.
# Use Cases: Autocomplete, spell check, pattern matching.
# Components
# TrieNode Class

# Purpose: Represents each node in the trie.
# Attributes:
# children: A dictionary that holds child nodes where each key is a character and the value is another TrieNode.
# word: A boolean that indicates if the node represents the last character of a word.
# Functionality: Initialize an empty node with no children and not marked as the end of a word.
# WordDictionary Class

# Purpose: Manages the trie and provides methods to add words and search for words.
# Attributes:
# root: The root node of the trie, does not hold a character but acts as the anchor for all words.
# Methods

# addWord(word: str)
# Purpose: Adds a word to the trie.
# Process:
# Start from the root.
# For each character in the word, move to the corresponding child node. If the child node for the character does not exist, create it.
# Mark the node of the last character as the end of a word.
# search(word: str)
# Purpose: Searches for a word in the trie, including patterns with wildcards.
# Process:
# Utilize a recursive helper function (depth-first search, DFS) to navigate through the trie.
# Start from the root and match each character:
# If the character is '.', recursively try all possible child nodes.
# If the character is a specific letter, move to the corresponding child node.
# If any path confirms the entire word exists, return True.
# Return False if no valid paths are found.
