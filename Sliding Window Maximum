class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        output = []
        q = collections.deque()  
        l = r = 0
        while r < len(nums):
            # pop smaller values from q
            while q and nums[q[-1]] < nums[r]:
                q.pop()
            q.append(r)

            # remove left val from window
            if l > q[0]:
                q.popleft()

            if (r + 1) >= k:
                output.append(nums[q[0]])
                l += 1
            r += 1

        return output

# Problem: Find the Maximum in Each Sliding Window of Size k
# Given an array nums and a sliding window size k, the task is to find the maximum value in each window of size k as the window slides from the beginning to the end of the array.

# Algorithm Steps
# Initialize Variables:

# output: an empty list to store the maximum values for each window.
# q: a deque (double-ended queue) to store indices of array elements in a way that helps in tracking the maximum values.
# l and r: pointers representing the left and right boundaries of the sliding window (both start at 0).
# Slide the Right Pointer (r):

# Iterate through nums using the right pointer r.
# For each element nums[r], ensure that q maintains indices in a decreasing order of values. This is done by:
# Removing Smaller Values: While q is not empty and the value at the index stored at the back of q (q[-1]) is less than nums[r], remove indices from the back of q. This ensures that only potential maximum values remain in q.
# Add the current index r to the back of q.
# Maintain the Window Size of k:

# If the left pointer l has moved beyond the index stored at the front of q (q[0]), remove that index from the front because itâ€™s no longer in the window.
# Record the Maximum Value Once the Window Size Reaches k:

# Check if the current window size is at least k (r + 1 >= k):
# If true, append the value of the element at the index stored at the front of q (nums[q[0]]) to output. This element is the maximum value in the current window.
# Increment the left pointer l to slide the window.
# Continue Until the Right Pointer Reaches the End:

# Increment r and continue the process until r traverses the entire array.
# Return the Output:

# After iterating through the entire array, return the output list containing the maximum values of each sliding window.
# Example Walkthrough
# Given: nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3

# Initial Window (r = 0 to 2):

# Start with l = 0, r = 0.
# r = 0: nums[0] = 1, q = [0] (Add 0 because it's empty).
# r = 1: nums[1] = 3, q = [1] (Remove 0 since 3 > 1).
# r = 2: nums[2] = -1, q = [1, 2] (Keep 1 since 3 > -1).
# Window Reaches Size k:

# Maximum value is nums[1] = 3.
# Output: [3]
# Next Window (r = 3):

# r = 3: nums[3] = -3, q = [1, 2, 3].
# Maximum remains nums[1] = 3 (index 1 is still within the window).
# Output: [3, 3]
# Next Window (r = 4):

# r = 4: nums[4] = 5, q = [4] (Remove 3, 2, 1 since 5 > -3, -1, 3).
# Maximum value is nums[4] = 5.
# Output: [3, 3, 5]
# Continue Similarly for Remaining Windows:

# r = 5: Window [3, -3, 5], max is 5.
# Output: [3, 3, 5, 5]
# r = 6: Window [5, 3, 6], max is 6.
# Output: [3, 3, 5, 5, 6]
# r = 7: Window [3, 6, 7], max is 7.
# Output: [3, 3, 5, 5, 6, 7]
# Summary
# The algorithm efficiently finds the maximum in each window by:

# Maintaining indices of potential maximums in the deque.
# Removing indices that fall out of the current window range.
# Ensuring the front of the deque always holds the index of the maximum value in the current window.
# This approach ensures that each element is processed only a few times, resulting in an overall time complexity of O(n).