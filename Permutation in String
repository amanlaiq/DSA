class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False
        
        s1c, s2c = [0] * 26, [0] * 26
        matches = 0

        for i in range(len(s1)):
            s1c[ord(s1[i]) - ord("a")] += 1
            s2c[ord(s2[i]) - ord("a")] += 1

        for i in range(26):
            matches += 1 if s1c[i] == s2c[i] else 0

        l = 0 

        for r in range(len(s1), len(s2)):
            if matches == 26:
                return True
            
            index = ord(s2[r]) - ord("a")
            s2c[index] += 1
            if s1c[index] == s2c[index]:
                matches += 1
            elif s1c[index] + 1 == s2c[index]:
                matches -= 1

            index = ord(s2[l]) - ord("a")
            s2c[index] -= 1
            if s1c[index] == s2c[index]:
                matches += 1
            elif s1c[index] + 1 == s2c[index]:
                matches -= 1

            l += 1

        return matches == 26


# class Solution:
#     def checkInclusion(self, s1: str, s2: str) -> bool:
#         if len(s1) > len(s2):
#             return False
# Initial Length Check:
# This line checks if s1 is longer than s2. If s1 is longer, it’s impossible for any permutation of s1 to be a substring of s2. Hence, the function returns False.
# python
# Copy code
#         s1Count, s2Count = [0] * 26, [0] * 26
#         for i in range(len(s1)):
#             s1Count[ord(s1[i]) - ord("a")] += 1 
#             s2Count[ord(s2[i]) - ord("a")] += 1
# Frequency Array Initialization:
# s1Count and s2Count are arrays of size 26 (one for each letter of the alphabet). These arrays will store the frequency of each letter in s1 and the first window of s2, respectively.
# The ord(s1[i]) - ord("a") expression converts a character to an index in the array. For example, 'a' becomes 0, 'b' becomes 1, etc.
# s1Count[ord(s1[i]) - ord("a")] += 1 increments the frequency count of the character in s1.
# Similarly, s2Count[ord(s2[i]) - ord("a")] += 1 initializes the frequency count for the first window of s2 with the same length as s1.
# python
# Copy code
#         matches = 0
#         for i in range(26):
#             matches += 1 if s1Count[i] == s2Count[i] else 0
# Initial Match Count:
# matches keeps track of how many characters have the same frequency in both s1 and the initial window of s2.
# The loop iterates over each index (0 to 25), checking if the count of each character in s1Count matches the count in s2Count.
# If they match, matches is incremented.
# python
# Copy code
#         l = 0
#         for r in range(len(s1), len(s2)):
#             if matches == 26:
#                 return True
# Sliding Window Initialization:
# l is the left index of the current window in s2.
# The for loop iterates over r starting from len(s1) to the end of s2. r represents the right boundary of the current window.
# If matches equals 26 (i.e., all 26 letters match in frequency), the function returns True because a permutation of s1 is found in s2.
# python
# Copy code
#             index = ord(s2[r]) - ord("a")
#             s2Count[index] += 1
#             if s1Count[index] == s2Count[index]:
#                 matches += 1
#             elif s1Count[index] + 1 == s2Count[index]:
#                 matches -= 1
# Update Window with New Character:
# index calculates the position in the frequency array for the new character s2[r] that is added to the window.
# s2Count[index] += 1 increments the frequency count for the new character.
# The if-elif block updates the matches count:
# If the count in s2Count matches s1Count, it means a character's frequency matches between s1 and the current window, so matches is incremented.
# If the count in s2Count exceeds s1Count by 1, it means the character's frequency is too high in the current window, so matches is decremented.
# python
# Copy code
#             index = ord(s2[l]) - ord("a")
#             s2Count[index] -= 1
#             if s1Count[index] == s2Count[index]:
#                 matches += 1
#             elif s1Count[index] - 1 == s2Count[index]:
#                 matches -= 1
#             l += 1
# Remove Old Character and Slide Window:
# index calculates the position in the frequency array for the character s2[l] that is removed from the window.
# s2Count[index] -= 1 decrements the frequency count for the removed character.
# The if-elif block updates the matches count:
# If the updated count in s2Count matches s1Count, it means the character's frequency matches between s1 and the current window, so matches is incremented.
# If the count in s2Count falls below s1Count by 1, it means the character’s frequency is too low in the current window, so matches is decremented.
# l += 1 moves the left boundary of the window to the right.
# python
# Copy code
#         return matches == 26
# Final Check:
# After the loop completes, if matches equals 26, all character frequencies match between s1 and some window in s2, so the function returns True.
# Otherwise, it returns False, meaning no permutation of s1 was found in s2.
# Notes for Future Reference:
# Frequency Arrays:

# Use arrays of fixed size (e.g., 26 for alphabet) for counting character frequencies to enable efficient access and updates.
# Sliding Window Technique:

# Efficiently update and check substrings by sliding the window one character at a time and adjusting counts.
# Match Counting:

# Track how many characters have matching frequencies between s1 and the current window of s2.
# Time Complexity:

# O(n) where n is the length of s2, as each character is processed a constant number of times.
# Space Complexity is O(1) due to fixed-size frequency arrays.
    
        