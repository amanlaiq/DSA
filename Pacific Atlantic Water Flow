class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        ROWS, COLS = len(heights), len(heights[0])
        pac, atl = set(), set()

        def dfs(r, c, visit, prevHeight):
            if (
                (r, c) in visit
                or r < 0
                or c < 0
                or r == ROWS
                or c == COLS
                or heights[r][c] < prevHeight
            ):
                return
            visit.add((r, c))
            dfs(r + 1, c, visit, heights[r][c])
            dfs(r - 1, c, visit, heights[r][c])
            dfs(r, c + 1, visit, heights[r][c])
            dfs(r, c - 1, visit, heights[r][c])

        for c in range(COLS):
            dfs(0, c, pac, heights[0][c])
            dfs(ROWS - 1, c, atl, heights[ROWS - 1][c])

        for r in range(ROWS):
            dfs(r, 0, pac, heights[r][0])
            dfs(r, COLS - 1, atl, heights[r][COLS - 1])

        res = []
        for r in range(ROWS):
            for c in range(COLS):
                if (r, c) in pac and (r, c) in atl:
                    res.append([r, c])
        return res

# dfs is the recursive function that explores the grid starting from a specific cell (r, c).
# The function takes four parameters:
# r: the row index of the current cell.
# c: the column index of the current cell.
# visit: a set to track visited cells for either Pacific or Atlantic (to avoid cycles and redundant exploration).
# prevHeight: the height of the previous cell to ensure water can only flow downhill or on flat terrain.
# Base Case (Stopping Conditions):

# The current cell (r, c) is skipped if:
# It has already been visited ((r, c) in visit).
# It's out of bounds (either r or c is negative or exceeds the grid's dimensions).
# The current cell's height is less than prevHeight (water can't flow uphill).
# Recursion:

# After checking the conditions, the current cell is added to the visit set.
# The DFS is then recursively applied to the four neighboring cells (up, down, left, right) with the new current height (heights[r][c]).

# After performing DFS for both oceans, the code iterates through every cell in the grid.
# If a cell (r, c) is present in both pac and atl, it means water can flow from that cell to both oceans.
# These cells are added to the result list res.