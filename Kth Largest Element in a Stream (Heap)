class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.minheap, self.k = nums, k 
        heapq.heapify(self.minheap)
        while len(self.minheap) > k:
            heapq.heappop(self.minheap)
        
    def add(self, val: int) -> int:
        heapq.heappush(self.minheap, val)
        if len(self.minheap) > self.k:
            heapq.heappop(self.minheap)
        return self.minheap[0]

     
        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)

# Brute Force Idea:
# Without a heap, the brute-force approach would be:

# Maintain a sorted list of all elements seen so far.
# Every time a new element is added, insert it into the sorted list and return the kth largest element by accessing the right index.
# Time Complexity: Sorting the list every time would take O(n log n) where n is the number of elements.